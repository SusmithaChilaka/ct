<?xml version="1.0" encoding="UTF-8"?>

<mule
	xmlns:xml-module="http://www.mulesoft.org/schema/mule/xml-module"
	xmlns:java="http://www.mulesoft.org/schema/mule/java"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:jbossts="http://www.mulesoft.org/schema/mule/jbossts"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/jbossts http://www.mulesoft.org/schema/mule/jbossts/current/mule-jbossts.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
http://www.mulesoft.org/schema/mule/xml-module http://www.mulesoft.org/schema/mule/xml-module/current/mule-xml-module.xsd">
	<!-- <asynchronous-processing-strategy name="Asynchronous_Processing_Strategy" 
		maxThreads="${etrcs.max.active.threads}" minThreads="${etrcs.max.idle.threads}" 
		threadTTL="${etrcs.thread.ttl}" threadWaitTimeout="${etrcs.thread.wait.timeout}" 
		maxBufferSize="${etrcs.max.buffer.size}" doc:name="Asynchronous Processing 
		Strategy" /> <queued-asynchronous-processing-strategy name="Queued_Asynchronous_Processing_Strategy" 
		poolExhaustedAction="WAIT" maxThreads="${etrcs.max.active.threads}" minThreads="${etrcs.max.idle.threads}" 
		threadTTL="${etrcs.thread.ttl}" threadWaitTimeout="${etrcs.thread.wait.timeout}" 
		maxBufferSize="${etrcs.max.buffer.size}" doc:name="Queued Asynchronous Processing 
		Strategy" maxQueueSize="${etrcs.max.queue.size}" queueTimeout="${etrcs.queue.timeout}"> 
		<simple-in-memory-queue-store /> </queued-asynchronous-processing-strategy> -->



	<http:request-config
		name="HTTP_Request_Configuration_Refund_Egypt"
		doc:name="HTTP Request configuration"
		basePath="${traacs.url.refund.path}"
		responseTimeout="${traacs.url.response.timeout}">
		<http:request-connection
			host="${traacs.url.host.eg}" port="${traacs.url.port.eg}"
			connectionIdleTimeout="${traacs.url.connection.timeout}"
			responseBufferSize="${traacs.url.response.timeout}" />
	</http:request-config>

	<http:request-config
		name="HTTP_Request_Configuration_Refund_Global"
		doc:name="HTTP Request configuration"
		doc:id="50a7ae02-8595-409a-92bf-ca19803b9137"
		basePath="${traacs.url.refund.path}"
		responseTimeout="${traacs.url.response.timeout}">
		<http:request-connection
			host="${traacs.url.host.gb}" port="${traacs.url.port.gb}"
			connectionIdleTimeout="${traacs.url.connection.timeout}"
			responseBufferSize="${traacs.url.response.timeout}" />
	</http:request-config>
	<flow name="TS.TraacsProcessInvoiceFlow">
		<java:invoke-static
			doc:name="springBuildTraacsRequestProcessorBean"
			class="com.ebreez.etrcs.traacs.processor.BuildTraacsRequestProcessor"
			method="onCall, loadTraacsJSONRequestMapper" />
		<choice doc:name="Choice">
			<when
				expression="#[flowVars[ETRCSConstants.VAR_PRODUCT] == 'FLT+HTL']">
				<foreach
					collection="#[flowVars[ETRCSConstants.VAR_FLIGHT_HOTEL_REQUEST]]"
					doc:name="Flight Hotel Invoice">
					<async doc:name="Async">
						<flow-ref name="ProcessFPHInvoice"
							doc:name="ProcessFPHInvoice" />
					</async>
				</foreach>
			</when>
			<when
				expression="#[flowVars[ETRCSConstants.VAR_PRODUCT] == 'HOTEL']">
				<foreach
					collection="#[flowVars[ETRCSConstants.VAR_HOTEL_REQUEST]]"
					doc:name="Hotel Invoice">
					<async doc:name="Async">
						<flow-ref name="ProcessHotelInvoice"
							doc:name="ProcessHotelInvoice" />
					</async>
				</foreach>
			</when>
			<when
				expression="#[flowVars[ETRCSConstants.VAR_PRODUCT] == 'FLIGHT']">
				<foreach
					collection="#[flowVars[ETRCSConstants.VAR_TICKET_REQUEST]]"
					doc:name="Flight Invoice">
					<async doc:name="Async">
						<flow-ref name="ProcessFlightInvoice"
							doc:name="ProcessFlightInvoice" />
					</async>
				</foreach>
			</when>
			<when
				expression="#[flowVars[ETRCSConstants.VAR_PRODUCT] == 'CAR']">
				<foreach
					collection="#[flowVars[ETRCSConstants.VAR_CAR_REQUEST]]"
					doc:name="Car / Transfer Invoice">
					<async doc:name="Async">
						<flow-ref name="ProcessCarInvoice"
							doc:name="ProcessCarInvoice" />
					</async>
				</foreach>
			</when>
			<when
				expression="#[flowVars[ETRCSConstants.VAR_PRODUCT] == 'OTHER']">
				<foreach
					collection="#[flowVars[ETRCSConstants.VAR_OTHER_REQUEST]]"
					doc:name="Other Invoice">
					<async doc:name="Async">
						<flow-ref name="ProcessOtherInvoice"
							doc:name="ProcessOtherInvoice" />
					</async>
				</foreach>
			</when>
			<when
				expression="#[flowVars[ETRCSConstants.VAR_PRODUCT] == 'PACKAGES']">
				<foreach
					collection="#[flowVars[ETRCSConstants.VAR_PACKAGE_REQUEST]]"
					doc:name="Package Invoice">
					<async doc:name="Async">
						<flow-ref name="ProcessPackageInvoice"
							doc:name="ProcessPackageInvoice" />
					</async>
				</foreach>
			</when>
			<when
				expression="#[flowVars[ETRCSConstants.VAR_PRODUCT] == 'ACTIVITY']">
				<foreach
					collection="#[flowVars[ETRCSConstants.VAR_ACTIVITY_REQUEST]]"
					doc:name="Activity Invoice">
					<async doc:name="Async">
						<flow-ref name="ProcessActivityInvoice"
							doc:name="ProcessActivityInvoice" />
					</async>
				</foreach>
			</when>
			<otherwise>
				<logger
					message="Invalid data, Flight or Hotel data is not there in the request"
					level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>
		<set-variable
			variableName="#[ETRCSConstants.VAR_UPDATE_RESPONSE]"
			value="#['Processed all Invoices']" doc:name="Variable" />
	</flow>
	<flow name="ProcessFPHInvoice">
		<ee:transform doc:name="Transform Message"
			doc:id="df92e58b-faae-4218-937c-26aac5e851d8">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

import java!com::ebreez::etrcs::constants::ETRCSConstants

output application/json

---
{
    fileType: vars.'ETRCSConstants.CON_REQUEST_TYPE',
    traacsURLPath: p('traacs.url.fph.path')
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable
			value="ETRCSConstants.CON_FLIGHT_PLUS_HOTEL_PRODUCT"
			variableName="product" doc:name="product" />
		<set-variable variableName="flowType"
			value="flowVars[ETRCSConstants.VAR_FLOW_TYPE]" doc:name="flowType" />
		<flow-ref name="SendInvoice" doc:name="SendInvoice" />
		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue">
				<logger message="Exception while processing Flight invoice"
					level="INFO" doc:name="Logger" />
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>
	</flow>
	<flow name="ProcessFlightInvoice">


		<ee:transform doc:name="Transform Message"
			doc:id="1618c5eb-6186-4530-9c2f-4df8eb39d4eb">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

        output application/json
        ---
        {
            fileType: vars.'ETRCSConstants.CON_REQUEST_TYPE',
            traacsURLPath: p('traacs.url.ticket.path')
        }]]></ee:set-payload>
			</ee:message>
		</ee:transform>


		<set-variable
			value="#[ETRCSConstants.CON_FLIGHT_PRODUCT]" variableName="product"
			doc:name="product" />
		<set-variable variableName="flowType"
			value="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE]]" doc:name="flowType" />
		<flow-ref name="SendInvoice" doc:name="SendInvoice" />
		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue">
				<logger message="Exception while processing Flight invoice"
					level="INFO" doc:name="Logger" />
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>
	</flow>
	<flow name="ProcessHotelInvoice">
		<ee:transform doc:name="Transform Message"
			doc:id="49e6910c-e10f-442d-a73c-9c378e191bad">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

import java!com::ebreez::etrcs::constants::ETRCSConstants

output application/json

---
{
    fileType: vars.'ETRCSConstants.CON_REQUEST_TYPE',
    traacsURLPath: p('traacs.url.hotel.path')
}
]]></ee:set-payload>
				<ee:set-attributes><![CDATA[%dw 2.0
output application/java
---
{
	 fileType: vars['ETRCSConstants.CON_REQUEST_TYPE'],
    traacsURLPath: vars['traacs.url.fph.path']
}]]></ee:set-attributes>
			</ee:message>
		</ee:transform>
		<set-variable value="#[ETRCSConstants.CON_HOTEL_PRODUCT]"
			variableName="product" doc:name="product" />
		<set-variable variableName="flowType"
			value="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE]]" doc:name="flowType" />
		<flow-ref name="SendInvoice" doc:name="SendInvoice" />
		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue">
				<logger message="Exception while processing Hotel invoice"
					level="INFO" doc:name="Logger" />
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>
	</flow>
	<flow name="ProcessCarInvoice">
		<ee:transform doc:name="Transform Message"
			doc:id="042f993f-0385-4b49-8d76-e3ab6c0f665d">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

import java!com::ebreez::etrcs::constants::ETRCSConstants

output application/json

---
{
    fileType: vars['ETRCSConstants.CON_REQUEST_TYPE'],
    traacsURLPath: p('traacs.url.carTrans.path')
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable
			value="#[flowVars[ETRCSConstants.VAR_CAR_TRANSFER]]"
			variableName="product" doc:name="product" />
		<set-variable variableName="flowType"
			value="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE]]" doc:name="flowType" />
		<flow-ref name="SendInvoice" doc:name="SendInvoice" />
		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue">
				<logger message="Exception while processing Car invoice"
					level="INFO" doc:name="Logger" />
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>
	</flow>
	<flow name="ProcessOtherInvoice">
		<ee:transform doc:name="Transform Message"
			doc:id="0f89d89f-e11b-4ed3-a547-1671ce741972">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

import java!com::ebreez::etrcs::constants::ETRCSConstants

output application/json

---
{
    fileType: vars['ETRCSConstants.CON_REQUEST_TYPE'],
    traacsURLPath: p('traacs.url.other.path')
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable
			value="#[flowVars[ETRCSConstants.VAR_PRODUCT]]"
			variableName="product" doc:name="product" />
		<set-variable variableName="flowType"
			value="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE]]" doc:name="flowType" />
		<flow-ref name="SendInvoice" doc:name="SendInvoice" />
		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue - Car Invoice">
				<logger message="Exception while processing Car invoice"
					level="INFO" doc:name="Logger" />
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>
	</flow>
	<flow name="ProcessPackageInvoice">
		<ee:transform doc:name="Transform Message"
			doc:id="58390b19-eb60-4f18-aac9-f260e91e9d2c">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

import java!com::ebreez::etrcs::constants::ETRCSConstants

output application/json

---
{
    fileType: vars['ETRCSConstants.CON_REQUEST_TYPE'],
    traacsURLPath: p('traacs.url.other.path')
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable
			value="#[flowVars[ETRCSConstants.VAR_PRODUCT]]"
			variableName="product" doc:name="product" />
		<set-variable variableName="flowType"
			value="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE]]" doc:name="flowType" />
		<flow-ref name="SendInvoice" doc:name="SendInvoice" />
		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue - Package Invoice">
				<logger message="Exception while processing Package invoice"
					level="INFO" doc:name="Logger" />
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>

	</flow>
	<flow name="ProcessActivityInvoice">
		<ee:transform doc:name="Transform Message"
			doc:id="33f14abb-a68f-4f43-a1df-32d20ae9bc2e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

import java!com::ebreez::etrcs::constants::ETRCSConstants

output application/json

---
{
    fileType: vars['ETRCSConstants.CON_REQUEST_TYPE'],
    traacsURLPath: p('traacs.url.other.path')
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable
			value="#[flowVars[ETRCSConstants.VAR_PRODUCT]]"
			variableName="product" doc:name="product" />
		<set-variable variableName="flowType"
			value="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE]]" doc:name="flowType" />
		<flow-ref name="SendInvoice" doc:name="SendInvoice" />
		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue - Activity Invoice">
				<logger message="Exception while processing Activity invoice"
					level="INFO" doc:name="Logger" />
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>

	</flow>

	<flow name="SendInvoice">
		<set-variable variableName="SALES_FLYIN_CODE"
			value="flowVars[ETRCSConstants.CON_FLYIN_CODE_KEY]"
			doc:name="Variable" />
		<db:select doc:name="Database"
			doc:id="cb447374-fd82-487d-89cf-b54fb050059a"
			config-ref="etrcs_db_configuration"
			target="ETRCSConstants.DOMAIN_TYPE">
			<db:sql><![CDATA[${select.sales.domain}]]></db:sql>
			<db:input-parameters ><![CDATA[#[{"SALES_FLYIN_CODE":payload}]]]></db:input-parameters>
		</db:select>
		<java:invoke-static
			doc:name="springAuthenticationKeyMapperBean"
			class="com.ebreez.etrcs.traacs.processor.AuthenticationKeyMapper"
			method="onCall" />
		<flow-ref name="TS.SendPrimaryInvoiceToTraacs"
			doc:name="TS.SendPrimaryInvoiceToTraacs" />

		<error-handler>
			<on-error-continue logException="true"
				doc:name="On Error Continue">
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-continue>
		</error-handler>

	</flow>
	<flow name="PersistInvoiceResponseInDB">
		<ee:transform doc:name="Init error codes and msgs"
			doc:id="64333607-ddbe-49e0-b063-9d5cbfdcd954">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import p from Mule

import java!com::ebreez::etrcs::constants::ETRCSConstants

output application/json

---
{
    fileType: vars['ETRCSConstants.CON_REQUEST_TYPE'],
    TRAACS_CONNECTION_ERR_MSG: p('TRAACS_CONNECTION_ERR_MSG'),
    TRAACS_OTHER_ERR_MSG: p('TRAACS_OTHER_ERR_MSG'),
    TRAACS_EMPTY_RESPONSE: p('TRAACS_EMPTY_RESPONSE')
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<java:invoke-static
			doc:name="springTraacsDBRequestBuilderBean"
			class="com.ebreez.etrcs.traacs.db.processor.TraacsDBRequestBuilder"
			method="onCall" />
		<set-variable variableName="db_Variable"
			value="#[payload]" doc:name="Variable for DB" />
		<flow-ref name="subInsertTraacStatusInDB"
			doc:name="subInsertTraacStatusInDB" />
		<!-- <choice doc:name="Choice">
			<when expression="#[flowType == 'SALES']">
				<choice doc:name="Choice">
					<when
						expression="#[flowVars['db_Variable'].flyinCode.startsWith('C')]">
						<db:update config-ref="com_db_configuration"
							doc:name="Database">
							<db:sql><![CDATA[${traacs.docNo.update.com.header}]]></db:sql>
						</db:update>
					</when>
					<otherwise>
						<db:update config-ref="etrcs_db_configuration"
							doc:name="Database">
							<db:sql><![CDATA[${traacs.docNo.update.sales.header}]]></db:sql>
						</db:update>
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<choice doc:name="Choice">
					<when
						expression="#[flowVars['db_Variable'].flyinCode.startsWith('C')]">
						<db:update config-ref="com_db_configuration"
							doc:name="Database">
							<db:sql><![CDATA[${traacs.rfnd.docNo.update.com.header}]]></db:sql>
						</db:update>
					</when>
					<otherwise>
						<db:update config-ref="etrcs_db_configuration"
							doc:name="Database">
							<db:sql><![CDATA[${traacs.rfnd.docNo.update.sales.header}]]></db:sql>
						</db:update>
					</otherwise>
				</choice>
			</otherwise>
		</choice> -->
	</flow>
	<flow name="TS.AuditTraacsRQRS">
		<choice doc:name="Choice">
			<when expression="'${traacs.env}'=='PROD'">
				<logger
					message="*** Do nothing, no audit file will be created in Prod ***"
					level="INFO" doc:name="Logger" />
			</when>
			<otherwise>
				<choice doc:name="Choice">
					<when
						expression="#[flowVars[ETRCSConstants.VAR_MODIFIED_BY] !='STANDALONE FLOW']">
						<file:write path="${traacs.audit.file.path}"

							doc:name="Main Flow file" />
					</when>
					<otherwise>
						<file:write path="${traacs.audit.file.path}"

							doc:name="StandaloneFile" />
					</otherwise>
				</choice>
			</otherwise>
		</choice>
		<error-handler>
			<on-error-continue doc:name="On Error Continue">
				<logger
					message="Internal Error while writing file, payload: #[payload]"
					level="INFO" category="TraacInvoice" doc:name="Logger" />
			</on-error-continue>
		</error-handler>

	</flow>
	<flow name="TS.SendPrimaryInvoiceToTraacs">
		<choice doc:name="Choice">
			<when expression="#[flowVars.CrossJson == 'true']">
				<async doc:name="Async">
					<flow-ref name="TS.SendSecondaryInvoiceToTraacs"
						doc:name="TS.SendSecondaryInvoiceToTraacs" />
				</async>
				<choice doc:name="Choice">
					<when expression="#[flowVars.PrimaryService != null]">
						<choice doc:name="Choice">
							<when expression="#[flowVars.PrimaryService == 'EGYPT']">
								<logger message="Primary Route (Cross JSON)" level="INFO"
									doc:name="Logger" />
								<java:invoke-static doc:name="Java"
									class="com.ebreez.etrcs.traacs.processor.BuildPrimaryTraacsRequest"
									method="onCall, deepClone" />
								<ee:transform doc:name="Object to JSON">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>

								<ee:transform doc:name="Message Properties">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "DOMAIN": vars.PrimaryService
            }
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>


								<flow-ref name="TS.AuditTraacsRQRS"
									doc:name="TS.AuditTraacsRQRS" />
								<logger
									message="Request for #[flowVars.FileNameFlyinCode] is to be submitted to Traacs"
									level="INFO" category="TraacsService" doc:name="Logger" />
								<choice doc:name="Choice">
									<when
										expression="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE] == 'REFUND']">
										<http:request
											config-ref="HTTP_Request_Configuration_Refund_Egypt"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</when>
									<otherwise>
										<http:request
											config-ref="HTTP_Request_Configuration_Sales_Egypt"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<java:invoke-static doc:name="Java"
									class="com.ebreez.etrcs.traacs.processor.BuildPrimaryTraacsRequest"
									method="onCall, deepClone" />
								<ee:transform doc:name="Object to JSON">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>
								<ee:transform doc:name="Message Properties">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
        output application/json
        ---
        {
            "DOMAIN": vars.PrimaryService
        }
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>

								<flow-ref name="TS.AuditTraacsRQRS"
									doc:name="TS.AuditTraacsRQRS" />
								<logger
									message="Request for #[flowVars.FileNameFlyinCode] is to be submitted to Traacs"
									level="INFO" category="TraacsService" doc:name="Logger" />
								<choice doc:name="Choice">
									<when
										expression="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE] == 'REFUND']">
										<http:request
											config-ref="HTTP_Request_Configuration_Refund_Global"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</when>
									<otherwise>
										<http:request
											config-ref="HTTP_Request_Configuration_Sales_Global"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</otherwise>
								</choice>
							</otherwise>
						</choice>
						<ee:transform doc:name="Object to String">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload as String
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>

						<logger
							message="Response for #[flowVars.FileNameFlyinCode] is received..."
							level="INFO" category="TraacsService" doc:name="Logger" />
						<ee:transform doc:name="Message Properties">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "fileType": ETRCSConstants.CON_RESPONSE_TYPE
            }
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<flow-ref name="TS.AuditTraacsRQRS"
							doc:name="TS.AuditTraacsRQRS" />
						<choice>
							<when
								expression="#[payload != null and sizeOf(payload) > 0]">
								<ee:transform doc:name="Transform JSON to Object">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
payload as Object]]></ee:set-payload>
									</ee:message>
								</ee:transform>
								<ee:transform doc:name="Process Traacs Response">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
    // Transform and process your payload here
    // For example, if you have a TraacsResponseProcessor bean:
    "result": payload
}]]></ee:set-payload>
									</ee:message>
								</ee:transform>
							</when>
							<otherwise>
								<logger level="INFO"
									message="Empty JSON Response from TRAACS" doc:name="Logger" />
							</otherwise>
						</choice>

						<flow-ref name="PersistInvoiceResponseInDB"
							doc:name="PersistInvoiceResponseInDB" />
					</when>
					<otherwise>
						<logger
							message="Not Processing, as Primary #[flowVars.PrimaryService] JSON already Processed"
							level="INFO" doc:name="Logger" />
					</otherwise>
				</choice>

			</when>
			<otherwise>
				<choice doc:name="Choice">
					<when expression="#[flowVars.PrimaryService != null]">
						<choice doc:name="Choice">
							<when expression="#[flowVars.PrimaryService == 'EGYPT']">
								<logger message="Primary Route (No Cross JSON)"
									level="INFO" doc:name="Logger" />
								<java:invoke-static doc:name="Java"
									class="com.ebreez.etrcs.traacs.processor.BuildPrimaryTraacsRequest"
									method="onCall, deepClone" />
								<ee:transform doc:name="Object to JSON">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>
								<ee:transform doc:name="Message Properties">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "DOMAIN": flowVars.PrimaryService
            }
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>


								<flow-ref name="TS.AuditTraacsRQRS"
									doc:name="TS.AuditTraacsRQRS" />
								<logger
									message="Request for #[flowVars.FileNameFlyinCode] is to be submitted to Traacs"
									level="INFO" doc:name="Logger" category="TraacsService" />
								<choice doc:name="Choice">
									<when
										expression="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE] == 'REFUND']">
										<http:request
											config-ref="HTTP_Request_Configuration_Refund_Egypt"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</when>
									<otherwise>
										<http:request
											config-ref="HTTP_Request_Configuration_Sales_Egypt"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</otherwise>
								</choice>
							</when>
							<otherwise>
								<java:invoke-static doc:name="Java"
									class="com.ebreez.etrcs.traacs.processor.BuildPrimaryTraacsRequest"
									method="onCall, deepClone" />
								<ee:transform doc:name="Object to JSON">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>
								<ee:transform doc:name="Message Properties">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "DOMAIN": vars.PrimaryService
            }
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>


								<flow-ref name="TS.AuditTraacsRQRS"
									doc:name="TS.AuditTraacsRQRS" />
								<logger
									message="Request for #[flowVars.FileNameFlyinCode] is to be submitted to Traacs"
									level="INFO" doc:name="Logger" category="TraacsService" />
								<choice doc:name="Choice">
									<when
										expression="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE] == 'REFUND']">
										<http:request
											config-ref="HTTP_Request_Configuration_Refund_Global"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</when>
									<otherwise>
										<http:request
											config-ref="HTTP_Request_Configuration_Sales_Global"
											path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
											method="POST" doc:name="HTTP" />
									</otherwise>
								</choice>
							</otherwise>
						</choice>
						<ee:transform doc:name="Object to String">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/java
            ---
            if (isEmpty(payload))
                null
            else
                payload[0]['TXN_ID'] as String
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>

						<logger
							message="Response for #[flowVars.FileNameFlyinCode] is received..."
							level="INFO" category="TraacsService" doc:name="Logger" />

						<ee:transform doc:name="Message Properties">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "fileType": vars['ETRCSConstants.CON_RESPONSE_TYPE']
            }
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<flow-ref name="TS.AuditTraacsRQRS"
							doc:name="TS.AuditTraacsRQRS" />
						<choice>
							<when
								expression="#[payload != null and sizeOf(payload) > 0]">

								<ee:transform doc:name="JSON to Object">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
            output application/java
            ---
            read(payload, 'application/json', 'class com.ebreez.etrcs.traacs.response.vo.TraacsResponse')
        ]]></ee:set-payload>
									</ee:message>
								</ee:transform>
								<java:invoke-static
									doc:name="TraacsResponseProcessor"
									doc:id="b709fc23-381c-4675-bb3f-90896d1219e3"
									class="com.ebreez.etrcs.traacs.processor.TraacsResponseProcessor"
									method="onCall" />
							</when>
							<otherwise>
								<logger message="Empty JSON Response from TRAACS"
									level="INFO" doc:name="Logger" />
							</otherwise>
						</choice>

						<flow-ref name="PersistInvoiceResponseInDB"
							doc:name="PersistInvoiceResponseInDB" />
					</when>
					<otherwise>
						<logger
							message="Not Processing, as Primary #[flowVars.PrimaryService] JSON already Processed"
							level="INFO" doc:name="Logger" />
					</otherwise>
				</choice>
			</otherwise>
		</choice>

		<error-handler>
			<on-error-propagate type="MULE:ANY">
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-propagate>
		</error-handler>

	</flow>
	<flow name="TS.SendSecondaryInvoiceToTraacs">
		<ee:transform doc:name="JSON to Object">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
            output application/java
            ---
            read(payload, 'application/json', 'com.ebreez.etrcs.traacs.request.vo.MasterJson')
        ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<java:invoke-static doc:name="Java"
			class="com.ebreez.etrcs.traacs.processor.BuildSecondaryTraacsRequest"
			method="onCall, setScaleNConvertToDouble, deepClone" />
		<choice doc:name="Choice">
			<when expression="#[flowVars.SecondarySerivce != null]">
				<choice doc:name="Choice">
					<when expression="#[flowVars.SecondarySerivce == 'EGYPT']">
						<logger message="Secondary Route" level="INFO"
							doc:name="Logger" />
						<ee:transform doc:name="Object to JSON">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<ee:transform doc:name="Message Properties">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "DOMAIN": vars.SecondarySerivce
            }
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>


						<flow-ref name="TS.AuditTraacsRQRS"
							doc:name="TS.AuditTraacsRQRS" />
						<logger
							message="Request for #[flowVars.FileNameFlyinCode] is to be submitted to Traacs"
							level="INFO" category="TraacsService" doc:name="Logger" />
						<choice doc:name="Choice">
							<when
								expression="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE] == 'REFUND']">
								<http:request
									config-ref="HTTP_Request_Configuration_Refund_Egypt"
									path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
									method="POST" doc:name="HTTP" />
							</when>
							<otherwise>
								<http:request
									config-ref="HTTP_Request_Configuration_Sales_Egypt"
									path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
									method="POST" doc:name="HTTP" />
							</otherwise>
						</choice>
					</when>
					<otherwise>
						<ee:transform doc:name="Object to JSON">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<ee:transform doc:name="Message Properties">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "DOMAIN": vars.SecondarySerivce
            }
        ]]></ee:set-payload>
							</ee:message>
						</ee:transform>


						<flow-ref name="TS.AuditTraacsRQRS"
							doc:name="TS.AuditTraacsRQRS" />
						<logger
							message="Request for #[flowVars.FileNameFlyinCode] is to be submitted to Traacs"
							level="INFO" category="TraacsService" doc:name="Logger" />
						<choice doc:name="Choice">
							<when
								expression="#[flowVars[ETRCSConstants.VAR_FLOW_TYPE] == 'REFUND']">
								<http:request
									config-ref="HTTP_Request_Configuration_Refund_Global"
									path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
									method="POST" doc:name="HTTP" />
							</when>
							<otherwise>
								<http:request
									config-ref="HTTP_Request_Configuration_Sales_Global"
									path="#[message.outboundProperties[ETRCSConstants.CON_TRAACS_PATH_KEY]]"
									method="POST" doc:name="HTTP" />
							</otherwise>
						</choice>
						<ee:transform doc:name="Transform Message"
							doc:id="ff9ff4c5-4303-41b3-8e84-095da10eeb6d">
							<ee:message />
						</ee:transform>
					</otherwise>
				</choice>
				<ee:transform doc:name="Object to String">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
            output application/java
            ---
            payload as String
        ]]></ee:set-payload>
					</ee:message>
				</ee:transform>

				<logger
					message="Response for #[flowVars.FileNameFlyinCode] is received..."
					level="INFO" category="TraacsService" doc:name="Logger" />

				<ee:transform doc:name="Message Properties">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            {
                "fileType": vars['ETRCSConstants.CON_RESPONSE_TYPE']
            }
        ]]></ee:set-payload>
					</ee:message>
				</ee:transform>


				<flow-ref name="TS.AuditTraacsRQRS"
					doc:name="TS.AuditTraacsRQRS" />
				<choice>
					<when expression="#[payload != null and sizeOf(payload) > 0]">
						<ee:transform doc:name="Transform Message">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
payload as Object]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<ee:transform doc:name="Transform Message">
							<ee:message>
								<ee:set-payload><![CDATA[{
                    "class": "com.ebreez.etrcs.traacs.response.vo.TraacsResponse",
                    "payload": payload
                }]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<java:invoke-static
							doc:name="springTraacsResponseProcessorBean"
							class="com.ebreez.etrcs.traacs.processor.TraacsResponseProcessor"
							method="onCall" />
					</when>
					<otherwise>
						<logger message="Empty JSON Response from TRAACS"
							level="INFO" doc:name="Logger" />
					</otherwise>
				</choice>

				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</when>
			<otherwise>
				<logger
					message="Not Processing, as Secondary #[flowVars.SecondarySerivce] JSON already Processed"
					level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>

		<error-handler>
			<on-error-propagate type="MULE:ANY"
				doc:name="On Error Propagate">
				<!-- Handle the exception or perform additional processing here -->
				<flow-ref name="PersistInvoiceResponseInDB"
					doc:name="PersistInvoiceResponseInDB" />
			</on-error-propagate>
		</error-handler>
	</flow>
</mule>