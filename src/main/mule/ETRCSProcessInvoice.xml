<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:java="http://www.mulesoft.org/schema/mule/java"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
		http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
		http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/spring http://www.mulesoft.org/schema/mule/spring/current/mule-spring.xsd http://www.mulesoft.org/schema/mule/core
http://www.springframework.org/schema/beans">
	<flow name="TS.ETRCSProcessInvoiceFlow"
		doc:id="7204c44b-7c92-4a24-9d11-fedf58655ab0">
		<flow-ref name="subTransformAndStoreInoviceRequestObject"
			doc:name="subTransformAndStoreInoviceRequestObject" />
		<flow-ref name="BuildMainFlowMasterData"
			doc:name="BuildMainFlowMasterData" />
		<set-variable
			variableName="ETRCSConstants.VAR_MODIFIED_BY" value="MAIN FLOW"
			doc:name="Variable" />
		<set-variable
			variableName="ETRCSConstants.HOTEL_STATIC_DATA_URL"
			value="${pkgservice.hotel.static.data.url}" doc:name="Variable" />
		<set-variable variableName="ETRCSConstants.TRAACS_ACTION"
			value="${traacs.create.action}" doc:name="TRAACS_ACTION" />
		<async doc:name="Async">
			<flow-ref name="TS.TraacsProcessInvoiceFlow"
				doc:name="TS.TraacsProcessInvoiceFlow" />
		</async>
		<set-payload
			value="${etrcs.invoice.confirmation.response}" doc:name="Set Payload" />
		<ee:transform doc:name="Object to JSON">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
            output application/json
            ---
            payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>

	</flow>

	<sub-flow name="subTransformAndStoreInoviceRequestObject">
		<flow-ref name="transformAndStoreInvoiceRequestObject"
			doc:name="transformAndStoreInoviceRequestObject" />
		<scripting:execute
			doc:name="check for valid request"
			doc:id="dcb14492-0054-48dc-8612-a9e022f7015a"
			engine="check for valid request">
			<scripting:code><![CDATA[import com.ebreez.etrcs.exception.ETRCSException;
import com.ebreez.etrcs.constants.ETRCSConstants;

if(flowVars[ETRCSConstants.VAR_UPDATE_REQUEST] == null ){
	throw new ETRCSException(ETRCSConstants.ERROR_CODE_INVALID_JSON, "Invalid Request");
}]]></scripting:code>
		</scripting:execute>
	</sub-flow>

	<flow name="transformAndStoreInvoiceRequestObject">
		<ee:transform doc:name="JSON to Object">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
                output application/java
                ---
                payload as Object { class : "com.ebreez.etrcs.request.vo.TraacsInfoRequest" }
            ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<java:invoke
			doc:name="testClassBean"
			class="com.ebreez.etrcs.processor.TestClass"
			instance="testClassId" method="demoMethod(com.ebreez.etrcs.request.vo.TraacsInfoRequest;)">
			<java:args ><![CDATA[#[{
	traacsRQ:payload
}]]]></java:args>
		</java:invoke>
		<set-variable
			variableName="ETRCSConstants.VAR_UPDATE_REQUEST" value="#[payload]"
			doc:name="Store Update Request Object" />

		<error-handler>
			<on-error-propagate type="MULE:ANY">
				<logger
					message="Exception in Transforming from JSON to Object for Traacs Update: #[error.description]"
					level="INFO" doc:name="Log Exception Message" />
			</on-error-propagate>
		</error-handler>
	</flow>

	<sub-flow name="subInsertTraacStatusInDB">
		<scatter-gather doc:name="Scatter-Gather">
			<route>
				<!-- Processing for Traacs -->
				<set-variable variableName="isTraacs" value="#[true]"
					doc:name="Set Variable for Traacs" />
				<db:select doc:name="Check for Traacs"
					config-ref="com_db_configuration">
					<db:sql><![CDATA[${traacs.isRecordExists.query}]]></db:sql>
				</db:select>
				<ee:transform doc:name="Transform DB Result">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
            output application/java
            ---
            if (isEmpty(payload)) 
                null
            else 
                payload[0]['TXN_ID'] as String
        ]]></ee:set-payload>
					</ee:message>
				</ee:transform>


				<choice doc:name="Check for Traacs">
					<when expression="#[!empty(vars['TXN_ID'])]">
						<!-- Handle updating Traacs response status in DB -->
						<set-variable variableName="TXN_ID"
							value="#[vars['TXN_ID']]" doc:name="Set TXN_ID" />
						<logger
							message="*** Updating Traacs response status to DB ***"
							level="INFO" category="TraacsService" doc:name="Logger" />
						<db:update doc:name="Update Traacs response status"
							config-ref="com_db_configuration">
							<db:sql><![CDATA[${traacs.status.update.query}]]></db:sql>
						</db:update>
					</when>
					<otherwise>
						<!-- Handle inserting Traacs response status in DB -->
					<!-- <expression-filter
							expression="#[vars['isTraacs'] and payload.flyinCode != null]"
							doc:name="Expression" />  --> 

						<ee:transform doc:name="Transform Message" doc:id="6073ff92-5324-4da6-b0ff-241bae11bc51">
							<ee:message>
								<ee:set-payload><![CDATA[
                %dw 2.0
                output application/json
                var isTraacs = vars.isTraacs
                ---
                if (isTraacs and payload.flyinCode != null) payload else null
            ]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<ee:transform doc:name="Transform TXN_ID for Insert">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
                                output application/java
                                ---
                                {
                                    TXN_ID: vars['TXN_ID']
                                }
                            ]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<logger
							message="*** Inserting Traacs response status to DB ***"
							level="INFO" category="TraacsService" doc:name="Logger" />
						<db:insert doc:name="Insert Traacs response status"
							config-ref="com_db_configuration">
							<db:sql><![CDATA[${traacs.status.insert.query}]]></db:sql>
						</db:insert>
					</otherwise>
				</choice>
			</route>
			<route>
				<!-- Processing for NAV -->
				<set-variable variableName="isTraacs" value="#[false]"
					doc:name="Set Variable for NAV" />
				<set-variable variableName="isNav" value="#[true]"
					doc:name="Set Variable for NAV" />
				<db:select doc:name="Check for NAV"
					config-ref="com_db_configuration">
					<db:sql><![CDATA[${nav.isRecordExists.query}]]></db:sql>
				</db:select>
				<ee:transform doc:name="Transform DB Result">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
            output application/java
            ---
            if (isEmpty(payload)) 
                null
            else 
                payload[0]['TXN_ID'] as String
        ]]></ee:set-payload>
					</ee:message>
				</ee:transform>


				<choice doc:name="Check for NAV">
					<when expression="#[!empty(vars['TXN_ID'])]">
						<!-- Handle updating NAV response status in DB -->
						<set-variable variableName="TXN_ID"
							value="#[vars['TXN_ID']]" doc:name="Set TXN_ID" />
						<logger
							message="*** Updating NAV response status to DB ***" level="INFO"
							category="TraacsService" doc:name="Logger" />
						<db:update doc:name="Update NAV response status"
							config-ref="com_db_configuration">
							<db:sql><![CDATA[${nav.status.update.query}]]></db:sql>

						</db:update>
					</when>
					<otherwise>
						<!-- Handle inserting NAV response status in DB -->
				<!-- 		  <expression-filter
							expression="#[vars['isNav'] and payload.flyinCode != null]"
							doc:name="Expression" />   -->
					<!-- 	<choice doc:name="Choice">
							<when
								expression="#[vars['isNav'] and payload.flyinCode != null]">
								
								<logger level="INFO" doc:name="Logger"
									message="Condition is true" />
							</when>
							<otherwise>
								
								<logger level="INFO" doc:name="Logger"
									message="Condition is false" />
							</otherwise>
						</choice>   -->

						<ee:transform
							doc:name="Filter with DataWeave">
							<ee:message>
							<ee:set-payload><![CDATA[
                %dw 2.0
                output application/json
                var isNav = vars.isNav
                ---
                if (isNav and payload.flyinCode != null) payload else null
            ]]></ee:set-payload>
            </ee:message>
						</ee:transform>

						<ee:transform doc:name="Transform TXN_ID for Insert">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
                                output application/java
                                ---
                                {
                                    TXN_ID: vars['TXN_ID']
                                }
                            ]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<logger
							message="*** Inserting NAV response status to DB ***"
							level="INFO" category="NAVService" doc:name="Logger" />
						<db:insert doc:name="Insert NAV response status"
							config-ref="com_db_configuration">
							<db:sql><![CDATA[${nav.status.insert.query}]]></db:sql>

						</db:insert>
					</otherwise>
				</choice>
			</route>
		</scatter-gather>
	</sub-flow>

</mule>
